# Import and open medical raw data 
library(readxl)
medical_raw_data <- read_excel("C:/Users/kolgi/OneDrive - Western Governors University/d206/medical_raw_data.xlsx")
View(medical_raw_data)

# Understanding and exploring the data
summary(medical_raw_data)
head(medical_raw_data)
str(medical_raw_data) 

# Convert children, age, income and initial days into numeric 
# Round initial days
medical_raw_data$Children <- as.numeric(medical_raw_data$Children)
medical_raw_data$Age <- as.numeric(na.omit(medical_raw_data$Age))
medical_raw_data$Income <- as.numeric(na.omit(medical_raw_data$Income))
medical_raw_data$Initial_days <- as.numeric(na.omit(medical_raw_data$Initial_days))
medical_raw_data$Initial_days <- round(medical_raw_data$Initial_days)

# Convert into numeric using plyr
install.packages("plyr")
library(plyr)

medical_raw_data$Soft_drink <- as.numeric(revalue(medical_raw_data$Soft_drink, c("Yes" = 1, "No" = 0, "NA" = NA)))
medical_raw_data$HighBlood <- as.numeric(revalue(medical_raw_data$HighBlood, c("Yes" = 1, "No" = 0, "NA" = NA)))
medical_raw_data$Stroke <- as.numeric(revalue(medical_raw_data$Stroke, c("Yes" = 1, "No" = 0, "NA" = NA)))
medical_raw_data$Complication_risk <- factor(medical_raw_data$Complication_risk, levels = c("Low", "Medium", "High"))
medical_raw_data$Overweight <- as.numeric(medical_raw_data$Overweight)
medical_raw_data$Arthritis <- as.numeric(revalue(medical_raw_data$Arthritis, c("Yes" = 1, "No" = 0, "NA" = NA)))
medical_raw_data$Diabetes <- as.numeric(revalue(medical_raw_data$Diabetes, c("Yes" = 1, "No" = 0, "NA" = NA)))
medical_raw_data$Hyperlipidemia <- as.numeric(revalue(medical_raw_data$Hyperlipidemia, c("Yes" = 1, "No" = 0, "NA" = NA)))
medical_raw_data$BackPain <- as.numeric(revalue(medical_raw_data$BackPain, c("Yes" = 1, "No" = 0, "NA" = NA)))
medical_raw_data$Anxiety <- as.numeric(medical_raw_data$Anxiety)
medical_raw_data$Allergic_rhinitis <- as.numeric(revalue(medical_raw_data$Allergic_rhinitis, c("Yes" = 1, "No" = 0, "NA" = NA)))
medical_raw_data$Reflux_esophagitis <- as.numeric(revalue(medical_raw_data$Reflux_esophagitis, c("Yes" = 1, "No" = 0, "NA" = NA)))
medical_raw_data$Asthma <- as.numeric(revalue(medical_raw_data$Asthma, c("Yes" = 1, "No" = 0, "NA" = NA)))

# Count duplicates
sum(duplicated(medical_raw_data)) 

library(dplyr)
medical_raw_data %>%
  count(Customer_id) %>%
  filter(n >1)

# Use naniar to find missing values 
install.packages("naniar")

library(naniar) 
miss_var_summary(medical_raw_data)
miss_case_summary(medical_raw_data)

# Create a missingness matrix
library(naniar)
missing_matrix <- as_tibble(medical_raw_data) %>%
  gg_miss_upset()
# Plot the missingness matrix
print(missing_matrix)

# find NAs #Shows all missing values per column
sum(is.na(medical_raw_data))
colSums(is.na(medical_raw_data))

# Find outliers through visualization 
library(ggplot2)

# Find outliers for population
boxplot(medical_raw_data$Population, outline = TRUE, main = "Box Plot of Population", ylab = "Population")

# Find outliers for children
boxplot(medical_raw_data$Children, outline = TRUE, main = "Box Plot of Children", ylab = "Children")

# Find outliers for age
boxplot(medical_raw_data$Age, outline = TRUE, main = "Box Plot of Age", ylab = "Age")

# Find outliers for income
boxplot(medical_raw_data$Income, outline = TRUE, main = "Box Plot of Income", ylab = "Income")

# Find outliers for Vitamin D Supplement
boxplot(medical_raw_data$VitD_supp, outline = TRUE, main = "Box Plot of Vitamin D supplement", ylab = "Vitamin D supplement")

# Find outliers for Vitamin D levels
boxplot(medical_raw_data$VitD_levels, outline = TRUE, main = "Box Plot of Vitamin D levels", ylab = "Vitamin D levels")

# Find outliers for doc visits
boxplot(medical_raw_data$Doc_visits, outline = TRUE, main = "Box Plot of Doc Visits", ylab = "Doc Visits")

# Find outliers for full meals eaten
boxplot(medical_raw_data$Full_meals_eaten, outline = TRUE, main = "Box Plot of Full Meals Eaten", ylab = "Full Meals Eaten")

# Find outliers for initial days
boxplot(medical_raw_data$Initial_days, outline = TRUE, main = "Box Plot of Initial Days", ylab = "Initial Days")

# Find outliers for total charge
boxplot(medical_raw_data$TotalCharge, outline = TRUE, main = "Box Plot of Total Charge", ylab = "Total Charge")

# Find outliers for additional charges
boxplot(medical_raw_data$Additional_charges, outline = TRUE, main = "Box Plot of Additional Charges", ylab = "Additional Charges")

# Find outliers for case order
boxplot(medical_raw_data$CaseOrder, outline = TRUE, main = "Box Plot of Case Order", ylab = "Case Order")

# Find outliers for zip
boxplot(medical_raw_data$Zip, outline = TRUE, main = "Box Plot of Zip", ylab = "Zip")

# Find outliers for lat
boxplot(medical_raw_data$Lat, outline = TRUE, main = "Box Plot of Latitude", ylab = "Latitude")

# Find outliers for lng
boxplot(medical_raw_data$Lng, outline = TRUE, main = "Box Plot of Longitude", ylab = "Longitude")

# Find outliers for Item1, Item2, Item3, Item4, Item5, Item6, Item7 and Item8 in one plane
library(ggplot2)
library(reshape2)
melted_data <- melt(medical_raw_data[, c("Item1", "Item2", "Item3", "Item4", "Item5", "Item6", "Item7", "Item8")])
ggplot(melted_data, aes(x = variable, y = value)) +
  geom_boxplot() +
  labs(title = "Box Plots of Items ", x = "Item No.", y = "Value") +
  theme_minimal()

# Count how many outliers for each variable using the Interquartile method
count_outliers <- function(x) {
  q1 <- quantile(x, 0.25, na.rm = TRUE)
  q3 <- quantile(x, 0.75, na.rm = TRUE)
  iqr <- q3 - q1
  lower_bound <- q1 - 1.5 * iqr
  upper_bound <- q3 + 1.5 * iqr
  
  outliers <- sum(x < lower_bound | x > upper_bound, na.rm = TRUE)
  return(outliers)
}

# List of variables for which you want to count outliers
variables_of_interest <- c("CaseOrder", "Zip", "Lat", "Lng" ,"Population", "Children", "Age", "Income", "VitD_supp", 
                           "VitD_levels", "Doc_visits", "Full_meals_eaten", "Initial_days", "TotalCharge", 
                           "Additional_charges", "Item1", "Item2", "Item3", "Item4", "Item5", 
                           "Item6", "Item7", "Item8")
outlier_counts <- data.frame(Variable = variables_of_interest, Count = numeric(length(variables_of_interest)))

# Loop through each variable
for (i in seq_along(variables_of_interest)) {
  variable <- variables_of_interest[i]
  outlier_counts$Count[i] <- count_outliers(medical_raw_data[[variable]])
}

# Print or inspect the outlier counts
print(outlier_counts)
